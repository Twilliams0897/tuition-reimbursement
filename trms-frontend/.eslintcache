[{"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/reportWebVitals.ts":"1","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/reducer.ts":"2","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claims.ts":"3","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/user/user.ts":"4","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/user/user.service.ts":"5","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/actions.ts":"6","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claims.service.ts":"7","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/App.tsx":"8","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/index.tsx":"9","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/calculations.ts":"10","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/routing.component.tsx":"11","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/home.component.tsx":"12","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/user/login.component.tsx":"13","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claimsDenial.component.tsx":"14","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claimsInfo.component.tsx":"15","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claimsList.component.tsx":"16","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/editClaims.component.tsx":"17","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/addClaim.component.tsx":"18","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claimsDetail.component.tsx":"19","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claims.component.tsx":"20","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claimsClass.component.tsx":"21","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/error.component.tsx":"22"},{"size":425,"mtime":1610724675315,"results":"23","hashOfConfig":"24"},{"size":1619,"mtime":1611111861086,"results":"25","hashOfConfig":"24"},{"size":896,"mtime":1611034173178,"results":"26","hashOfConfig":"24"},{"size":258,"mtime":1611026497384,"results":"27","hashOfConfig":"24"},{"size":769,"mtime":1611128637619,"results":"28","hashOfConfig":"24"},{"size":1446,"mtime":1611110222575,"results":"29","hashOfConfig":"24"},{"size":876,"mtime":1611098371668,"results":"30","hashOfConfig":"24"},{"size":1022,"mtime":1611155831888,"results":"31","hashOfConfig":"24"},{"size":934,"mtime":1611093847429,"results":"32","hashOfConfig":"24"},{"size":930,"mtime":1611158099721,"results":"33","hashOfConfig":"24"},{"size":3324,"mtime":1611179872222,"results":"34","hashOfConfig":"24"},{"size":921,"mtime":1611163822799,"results":"35","hashOfConfig":"24"},{"size":1665,"mtime":1611156142838,"results":"36","hashOfConfig":"24"},{"size":1660,"mtime":1611110014824,"results":"37","hashOfConfig":"24"},{"size":2722,"mtime":1611110016272,"results":"38","hashOfConfig":"24"},{"size":3328,"mtime":1611110017294,"results":"39","hashOfConfig":"24"},{"size":10768,"mtime":1611181872429,"results":"40","hashOfConfig":"24"},{"size":5856,"mtime":1611182013626,"results":"41","hashOfConfig":"24"},{"size":6103,"mtime":1611180990277,"results":"42","hashOfConfig":"24"},{"size":973,"mtime":1611180826457,"results":"43","hashOfConfig":"24"},{"size":1173,"mtime":1611110015448,"results":"44","hashOfConfig":"24"},{"size":1942,"mtime":1611111159368,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"10hl04j",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/reportWebVitals.ts",[],["99","100"],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/reducer.ts",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claims.ts",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/user/user.ts",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/user/user.service.ts",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/actions.ts",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claims.service.ts",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/App.tsx",["101","102"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\n//import ClaimClassComponent from './claims/claimsClass.component';\nimport RouterComponent from './routing.component';\nimport userService from './user/user.service';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from './actions';\nimport { BrowserRouter } from 'react-router-dom';\n\nfunction App() {\n    /* useState: A hook that can create a variable and a \n      setter to add to the state of the application and modify\n      that state to trigger a render.*/\n    const [cond, setCond] = useState(true);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        userService.getLogin().then((user) => {\n            console.log(user);\n            dispatch(getUser(user));\n        });\n    }, [dispatch]);\n\n    return (\n            <div className='container'>\n                <BrowserRouter>\n                    <RouterComponent></RouterComponent>\n                </BrowserRouter>\n            </div>\n    );\n}\n\nexport default App;\n","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/index.tsx",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/calculations.ts",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/routing.component.tsx",["103"],"import React from 'react';\nimport { Route, BrowserRouter, Link, useLocation, Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport HomeComponent from './home.component';\nimport LoginComponent from './user/login.component';\nimport ClaimsListComponent from './claims/claimsList.component';\nimport ClaimsDetailComponent from './claims/claimsDetail.component';\nimport ClaimsDenialComponent from './claims/claimsDenial.component';\nimport ClaimsInfoComponent from './claims/claimsInfo.component';\nimport ClaimsEditComponent from './claims/editClaims.component';\nimport AddClaimComponent from './claims/addClaim.component';\n\nimport { getUser} from './actions';\nimport { UserState } from './reducer';\nimport {User} from './user/user';\nimport userService from './user/user.service';\n\nimport ErrorBoundaryComponent from './error.component';\n\nexport default function RouterComponent() {\n    const userSelector = (state: UserState) => state.user;\n    const user = useSelector(userSelector);\n    const dispatch = useDispatch();\n\n    function logout() {\n        userService.logout().then(() => {\n            dispatch(getUser(new User()));\n        });\n    }\n\n    return (\n        <BrowserRouter>\n            <div>\n                <header className=\"App-header\">\n                    <h1>\n                        Tuition Reimbursement System\n                    </h1>\n                    <nav id='nav'>\n                        <ul>\n                            <li>\n                                {user.first ? (\n                                    <button className='link' onClick={logout}>\n                                        Logout\n                                    </button>\n                                ) : (\n                                        <Link to='/login'>Login</Link>\n                                    )}\n                            </li>\n\n                            <li>\n                                <Link to='/home'>Home</Link>\n                            </li>\n                            {user.first ? (\n                                <li>\n                                    <Link to='/claims'>Claims</Link>\n                                </li>\n                            ) : null}\n                        </ul>\n                    </nav>\n                    <div id='claimForm'></div>\n                </header>\n                <ErrorBoundaryComponent>\n                <Route\n                    exact\n                    path='/'\n                    render={() => <Redirect to='/home'></Redirect>}\n                />\n                <Route path='/login' component={LoginComponent} />\n                <Route path='/home' component={HomeComponent} />\n                <Route exact path='/claims' component={ClaimsListComponent} />\n                <Route exact path='/claims/:id' component={ClaimsDetailComponent} />\n                <Route exact path='/claims/:id/denial' component={ClaimsDenialComponent} />\n                <Route exact path='/claims/:id/info' component={ClaimsInfoComponent} />\n                <Route exact path='/claims/:id/edit' component={ClaimsEditComponent} />\n                <Route exact path='/addClaim' component={AddClaimComponent} />\n                </ErrorBoundaryComponent>\n            </div>\n        </BrowserRouter>\n    )\n}\n","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/home.component.tsx",["104"],"import { useSelector} from 'react-redux';\nimport { Link, Route, Redirect } from 'react-router-dom';\n\nimport { UserState } from './reducer';\nimport LoginComponent from './user/login.component';\n\nfunction HomeComponent(props: any) {\n    const userSelector = (state: UserState) => state.user;\n    const user = useSelector(userSelector);\n\n    return (\n        <div>\n            { user.first ? (\n                <div>\n                    <br />\n                Welcome, {user.first} {user.last}.\n                    <br />\n                    <Link to='/addClaim'>Create a new claim</Link>\n                </div>\n            ) : (\n                    <div>\n                        You are not logged in.\n                        <Route exact path='/home' \n                        render={() => <Redirect to='/login'></Redirect>}/>\n                    </div>\n            )}\n        </div>\n    )\n}\n\nexport default HomeComponent;\n","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/user/login.component.tsx",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claimsDenial.component.tsx",["105","106"],"import { SyntheticEvent } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getClaim, updateClaim } from '../actions';\nimport { UserState, ClaimsState } from '../reducer';\nimport claimsService from './claims.service';\n\nfunction ClaimsDenialComponent() {\n    const selectUser = (state: UserState) => state.user;\n    const user = useSelector(selectUser);\n    const selectClaim = (state: ClaimsState) => state.claim;\n    const claim = useSelector(selectClaim);\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    function handleDenialFormInput(e: SyntheticEvent) {\n        let c: any = {...claim};\n        c.usernameGiven = 'N/A';\n        c.approval[0].approved = 'Denied';\n        c.approval[0].reasonDeclined = ((e.target as HTMLInputElement).value);\n        if (c.approval[0].reasonInfo) {\n            c.approval[0].reasonInfo = null;\n        }\n        dispatch(updateClaim(c));\n    }\n\n    function submitForm() {\n        console.log('Rejecting claims: ' + JSON.stringify(claim));\n        claimsService.updateClaim(claim).then(() => {\n            dispatch(updateClaim(claim));\n            history.push('/claims');\n        });\n    }\n\n    function cancel() {\n        history.push('/claims/' + claim.claimsId);\n    }\n\n    return (\n        <div className='form'>\n            Reason for denial: <input type='text' className='form-control' onChange={handleDenialFormInput} name='description'/>\n            <button onClick={submitForm}>Submit</button>\n            <button onClick={cancel}>Cancel</button>\n        </div>\n    )\n}\n\nexport default ClaimsDenialComponent;\n","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claimsInfo.component.tsx",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claimsList.component.tsx",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/editClaims.component.tsx",["107"],"import { SyntheticEvent, useEffect } from 'react';\nimport claimService from './claims.service';\nimport {withRouter, useHistory} from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { ClaimsState, UserState } from '../reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateClaim } from '../actions';\nimport { claimCalculation } from '../calculations';\n\n\ninterface Params {\n    id: string;\n}\n// Function Component\nfunction EditClaimsComponent(props: RouteComponentProps<Params>) {\n    const selectUser = (state: UserState) => state.user;\n    const user = useSelector(selectUser);\n    const selectClaim = (state: ClaimsState) => state.claim;\n    const claim = useSelector(selectClaim);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    \n    function handleFormInput(e: SyntheticEvent) {\n        let c: any = { ...claim };\n        switch ((e.target as HTMLInputElement).name) {\n            case 'description':\n                c.course[0].description = ((e.target as HTMLInputElement).value);\n                break;\n            case 'date':\n                c.course[0].date = (e.target as HTMLInputElement).value;\n                break;\n            case 'time':\n                c.course[0].time = (e.target as HTMLInputElement).value;\n                break;\n            case 'location':\n                c.course[0].location = (e.target as HTMLInputElement).value;\n                break;\n            case 'amount':\n                c.course[0].amount = Number((e.target as HTMLInputElement).value);\n                break;\n            case 'gradingFormat':\n                c.course[0].gradingFormat = (e.target as HTMLInputElement).value;\n                break;\n            case 'justification':\n                c.course[0].justification = (e.target as HTMLInputElement).value;\n                break;\n            case 'comments':\n                c.course[0].comments = (e.target as HTMLInputElement).value;\n                break;\n            case 'approvedAmount':\n                c.approval[0].approvedAmount = (e.target as HTMLInputElement).value;\n                break;\n            case 'reasonAmountChange':\n                c.approval[0].reasonAmountChange = (e.target as HTMLInputElement).value;\n                break;\n        }\n        c.course[0].courseType = selectCourseType();\n        c.course[0].gradingFormat = selectGradingFormat();\n        if (c.course[0].gradingFormat === 'A-F') {\n            c.course[0].passingGrade = selectMinGrade();\n        } else {\n            c.course[0].passingGrade = '';\n        }\n        dispatch(updateClaim(c));\n    }\n\n    function resubmitForm() {\n        let c: any = { ...claim };\n        c.approval[0].usernameInfoProvider = null;\n        c.approval[0].usernameInfoRequestor = null;\n        c.approval[0].approved = 'Pending';\n        c.approval[0].approvedAmount = claimCalculation(c.course[0].amount, c.course[0].courseType);\n        console.log('Resubmitting claim: ' + JSON.stringify(claim));\n        claimService.updateClaim(claim).then(() => {\n            dispatch(updateClaim(claim));\n            history.push('/claims');\n        });\n    }\n\n    function submitForm() {\n        let c: any = { ...claim };\n        c.course[0].courseType = selectCourseType();\n        c.course[0].gradingFormat = selectGradingFormat();\n        if (c.course[0].gradingFormat === 'A-F') {\n            c.course[0].passingGrade = selectMinGrade();\n        } else {\n            c.course[0].passingGrade = '';\n        }\n        c.approval[0].approved = 'Pending';\n        c.approval[0].approvedAmount = claimCalculation(c.course[0].amount, c.course[0].courseType);\n        console.log('Submitting claim: ' + JSON.stringify(claim));\n        claimService.updateClaim(claim).then(() => {\n            dispatch(updateClaim(claim));\n            history.push('/claims');\n        });\n    }\n\n    function submitAmount() {\n        let c: any = { ...claim }\n        c.approval[0].usernameInfoRequestor = user.username;\n        c.approval[0].usernameInfoProvider = c.usernameRequest;\n        c.approval[0].approved = 'Awaiting info';\n        console.log('Submitting claim: ' + JSON.stringify(claim));\n        claimService.updateClaim(claim).then(() => {\n            dispatch(updateClaim(claim));\n            history.push('/claims');\n        });\n    }\n\n    function cancel() {\n        history.push('/claims/' + claim.claimsId);\n    }\n\n    function selectCourseType() {\n        let selector: string = (document.getElementById('courseSelect') as HTMLInputElement).value;\n        console.log(selector);\n        return selector;\n    }\n\n    function selectGradingFormat() {\n        let selector: string = (document.getElementById('gradingFormatSelect') as HTMLInputElement).value;\n        return selector;\n    }\n\n    function selectMinGrade() {\n        if (document.getElementById('minGradeSelect') as HTMLInputElement) {\n            let selector: string = (document.getElementById('minGradeSelect') as HTMLInputElement).value;\n            return selector;\n        } else {\n            return '';\n        }\n    }\n\n    return (\n        <div className = 'formContainer'>\n            {(() => {\n                if (user.username === claim.approval[0].usernameInfoProvider) {\n                    return (\n                        <p className = 'form'>\n                            {(() => {\n                                if (claim.approval[0].usernameInfoProvider && claim.approval[0].usernameInfoProvider === user.username) {\n                                    return (\n                                        <p>\n                                            Reason for information request: {claim.approval[0].reasonInfo}\n                                            <br/>\n                                        </p>\n                                    )\n                                }\n                            })()}\n                            Course description: <input type='text' className='form-control' value={claim.course.map((item) => {return item.description})} onChange={handleFormInput} name='description'/>\n                            <br/>\n                            Course type:\n                            <select id=\"courseSelect\">\n                                <option value='Uni'>University-level course</option>\n                                <option value='Sem'>Seminar</option>\n                                <option value='CertPrep'>Certification Preparation Class</option>\n                                <option value='Cert'>Certification</option>\n                                <option value='Tech'>Technical Training</option>\n                                <option value='Other'>Other</option>\n                            </select>\n                            <br/>\n                            Date: <input type='text' className='form-control' value={claim.course.map((item) => {return item.date})} onChange={handleFormInput} name='date'/>\n                            <br/>\n                            Time: <input type='text' className='form-control' value={claim.course.map((item) => {return item.time})} onChange={handleFormInput} name='time'/>\n                            <br/>\n                            Location: <input type='text' className='form-control' value={claim.course.map((item) => {return item.location})} onChange={handleFormInput} name='location'/>\n                            <br/>\n                            Total cost of course: <input type='text' className='form-control' value={claim.course.map((item) => {return String(item.cost)})} onChange={handleFormInput} name='amount'/>\n                            <br/>\n                            Projected reimbursement: {claim.approval[0].amountApproved}\n                            <br/>\n                            Grading format:\n                            <select id='gradingFormatSelect'>\n                                <option value='A-F'>A-F</option>\n                                <option value='Pass/Fail'>Pass/Fail</option>\n                                <option value='Complete/Incomplete'>Complete/Incomplete</option>\n                                <option value='Presentation'>Presentation</option>\n                            </select>\n                            <br/>\n                            Minimum passing grade:\n                            <select id='minGradeSelect'>\n                                <option value='N/A'>N/A</option>\n                                <option value='A'>A</option>\n                                <option value='B'>B</option>\n                                <option value='C'>C</option>\n                                <option value='D'>D</option>\n                            </select>\n                            <br/>\n                            Business justification: <input type='text' className='form-control' value={claim.course.map((item) => {return item.justification})} onChange={handleFormInput} name='justification'/>\n                            <br/>\n                            Comments: <input type='text' className='form-control' value={claim.course.map((item) => {return item.comments})} onChange={handleFormInput} name='comments'/>\n                            {(() => {\n                                if (claim.approval[0].usernameInfoProvider && claim.approval[0].usernameInfoProvider === user.username) {\n                                    return (<button className='formButton' onClick={resubmitForm}>Resubmit</button>)\n                                } else {\n                                    return (<button className='formButton' onClick={submitForm}>Submit</button>)\n                                }\n                            })()}\n                            <button onClick={cancel}>Cancel</button>\n                        </p>\n                        )\n                    }\n            })()}\n            {(() => {\n                if (user.role === 'HR') {\n                    return (\n                        <p className='form'>\n                            Reimbursement amount: <input type='text' className='form-control' value={claim.approval[0].amountApproved} onChange={handleFormInput} name='approvedAmount'/>\n                            <br/>\n                            Reason for change in amount: <input type='text' className='form-control' value={claim.approval[0].reasonAmountChange} onChange={handleFormInput} name='reasonAmountChange'/>\n                            <button className='formButton' onClick={submitAmount}>Submit</button>\n                            <button onClick={cancel}>Cancel</button>\n                        </p>\n                    )\n                }\n            })()}\n        </div>\n    )\n}\n\n\nexport default withRouter(EditClaimsComponent);\n","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/addClaim.component.tsx",["108"],"import { SyntheticEvent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport './restaurant.css'\nimport { getClaim, updateClaim } from '../actions';\nimport { UserState, ClaimsState } from '../reducer';\nimport claimsService from './claims.service';\nimport { claimCalculation, randomId } from '../calculations';\n\nfunction AddClaimComponent() {\n    const selectUser = (state: UserState) => state.user;\n    const user = useSelector(selectUser);\n    const selectClaim = (state: ClaimsState) => state.claim;\n    const claim = useSelector(selectClaim);\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    useEffect(() => {\n        let c: any = { ...claim}\n        \n        c.course[0].description = null;\n        c.course[0].courseType = null;\n        c.course[0].date = null;\n        c.course[0].time = null;\n        c.course[0].location = null;\n        c.course[0].cost = null;\n        c.course[0].gradingFormat = null;\n        c.course[0].justification = null;\n        c.course[0].comments = null;\n        c.approval[0].initApproval = null;\n        c.approval[0].secondApprover = null;\n        c.approval[0].approved = null;\n        c.approval[0].declinedReason = null;\n        c.approval[0].reasonInfo = null;\n        c.approval[0].usernameInfoRequestor= null;\n        c.approval[0].usernameInfoProvider = null;\n        c.approval[0].reasonAmountChange = null;\n        c.approval[0].grade = null;\n        c.approval[0].completed = null;\n        console.log('Add Claim useEffect' + JSON.stringify(c));\n        dispatch(getClaim(c));\n        //dispatch(updateClaim(c));\n    }, []);\n\n    function handleFormInput(e: SyntheticEvent) {\n        let c: any = { ...claim };\n        switch ((e.target as HTMLInputElement).name) {\n            case 'description':\n                c.course[0].description = ((e.target as HTMLInputElement).value);\n                break;\n            case 'date':\n                c.course[0].date = (e.target as HTMLInputElement).value;\n                break;\n            case 'time':\n                c.course[0].time = (e.target as HTMLInputElement).value;\n                break;\n            case 'location':\n                c.course[0].location = (e.target as HTMLInputElement).value;\n                break;\n            case 'amount':\n                c.course[0].cost = Number((e.target as HTMLInputElement).value);\n                break;\n            case 'gradingFormat':\n                c.course[0].gradingFormat = (e.target as HTMLInputElement).value;\n                break;\n            case 'justification':\n                c.course[0].justification = (e.target as HTMLInputElement).value;\n                break;\n        }\n        c.claimId = randomId(6);\n        console.log(c.claimId);\n        c.usernameRequest = user.username;\n        if (user.superPosition) {\n            c.usernameGiven = user.superPosition;\n        } else {\n            c.usernameGiven = user.username;\n        }\n        c.requestDetails = [{ first: user.first, last: user.last }];\n        console.log('running handleFormInput')\n        dispatch(updateClaim(c));\n    }\n\n    function submitForm() {\n        let c = { ...claim };\n        c.course[0].courseType = selectCourseType();\n        c.approval[0].approved = 'Pending'\n        c.approval[0].amountApproved = Number(claimCalculation(c.course[0].cost, c.course[0].courseType));\n        console.log('Submitting claim: ' + JSON.stringify(claim));\n        claimsService.addClaim(claim).then(() => {\n            dispatch(updateClaim(claim));\n            history.push('/home');\n        });\n    }\n\n    function cancel() {\n        history.push('/home');\n    }\n\n    function selectCourseType() {\n        let selector: string = (document.getElementById('courseSelect') as HTMLInputElement).value;\n        console.log(selector);\n        return selector;\n    }\n\n    return (\n        <div className='formContainer'>\n            <p className='form'>\n                Course description: <input type='text' className='form-control' onChange={handleFormInput} name='description' />\n                <br />\n                Course type: {/*<input type='text' className='form-control' onChange={handleFormInput} name='courseType'/>*/}\n                <select id=\"courseSelect\">\n                    <option value='Uni'>University-level course</option>\n                    <option value='Sem'>Seminar</option>\n                    <option value='CertPrep'>Certification Preparation Class</option>\n                    <option value='Cert'>Certification</option>\n                    <option value='Tech'>Technical Training</option>\n                    <option value='Other'>Other</option>\n                </select>\n                <br />\n                Date: <input type='text' className='form-control' onChange={handleFormInput} name='date' />\n                <br />\n                Time: <input type='text' className='form-control' onChange={handleFormInput} name='time' />\n                <br />\n                Location: <input type='text' className='form-control' onChange={handleFormInput} name='location' />\n                <br />\n                Total cost of course: <input type='text' className='form-control' onChange={handleFormInput} name='amount' />\n                <br />\n                Grading format: <input type='text' className='form-control' onChange={handleFormInput} name='gradingFormat' />\n                <br />\n                Business justification: <input type='text' className='form-control' onChange={handleFormInput} name='justification' />\n                <br />\n                <button className='formButton' onClick={submitForm}>Submit claim request</button>\n                <button onClick={cancel}>Cancel</button>\n            </p>\n        </div>\n    )\n}\n\nexport default AddClaimComponent;\n","/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claimsDetail.component.tsx",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claims.component.tsx",["109"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { claimCalculation } from '../calculations';\nimport { Claims } from './claims';\n\ninterface ClaimsProps {\n    data: Claims;\n}\n\nfunction ClaimsComponent(props: ClaimsProps) {\n    return (\n        <div>\n            <p>\n                {'Claim Id: '}\n                <Link to = {`/claims/${props.data.claimsId}`}>\n                    {props.data.claimsId}\n                </Link>\n                {\n                    `{\n                    Username: ${props.data.usernameRequest},\n                    Name:  ${props.data.requestDetails[0].first}, \n                    Employee Type: ${props.data.requestDetails[0].last},   \n                    Amount: $${props.data.approval[0].amountApproved},\n                    Approved Status: ${props.data.approval[0].approved}\n                    }`\n                }\n            </p>\n            <br/>\n        </div>\n    );\n\n}\n\nexport default ClaimsComponent;\n",["110","111"],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/claims/claimsClass.component.tsx",[],"/Users/shikawilliams/2012-dec14-react/projectOne/trms-frontend/src/error.component.tsx",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":14,"column":12,"nodeType":"118","messageId":"119","endLine":14,"endColumn":16},{"ruleId":"116","severity":1,"message":"120","line":14,"column":18,"nodeType":"118","messageId":"119","endLine":14,"endColumn":25},{"ruleId":"116","severity":1,"message":"121","line":2,"column":38,"nodeType":"118","messageId":"119","endLine":2,"endColumn":49},{"ruleId":"116","severity":1,"message":"122","line":5,"column":8,"nodeType":"118","messageId":"119","endLine":5,"endColumn":22},{"ruleId":"116","severity":1,"message":"123","line":5,"column":10,"nodeType":"118","messageId":"119","endLine":5,"endColumn":18},{"ruleId":"116","severity":1,"message":"124","line":11,"column":11,"nodeType":"118","messageId":"119","endLine":11,"endColumn":15},{"ruleId":"116","severity":1,"message":"125","line":1,"column":26,"nodeType":"118","messageId":"119","endLine":1,"endColumn":35},{"ruleId":"126","severity":1,"message":"127","line":43,"column":8,"nodeType":"128","endLine":43,"endColumn":10,"suggestions":"129"},{"ruleId":"116","severity":1,"message":"130","line":3,"column":10,"nodeType":"118","messageId":"119","endLine":3,"endColumn":26},{"ruleId":"112","replacedBy":"131"},{"ruleId":"114","replacedBy":"132"},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"@typescript-eslint/no-unused-vars","'cond' is assigned a value but never used.","Identifier","unusedVar","'setCond' is assigned a value but never used.","'useLocation' is defined but never used.","'LoginComponent' is defined but never used.","'getClaim' is defined but never used.","'user' is assigned a value but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'claim' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["135"],"'claimCalculation' is defined but never used.",["133"],["134"],"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},"Update the dependencies array to be: [claim, dispatch]",{"range":"138","text":"139"},[1678,1680],"[claim, dispatch]"]